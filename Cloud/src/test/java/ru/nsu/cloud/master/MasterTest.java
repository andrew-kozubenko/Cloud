package ru.nsu.cloud.master;

import org.junit.jupiter.api.*;
import ru.nsu.cloud.api.LambdaTask;
import ru.nsu.cloud.api.RemoteTask;
import ru.nsu.cloud.api.SerializableFunction;
import ru.nsu.cloud.client.CloudContext;
import ru.nsu.cloud.client.CloudDataset;
import ru.nsu.cloud.client.CloudSession;
import ru.nsu.cloud.master.Master;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class MasterTest {
    private static final int TEST_PORT = 5001;
    private Master master;
    private WorkerNode worker;
    private ExecutorService executorService;

    @BeforeAll
    void setUp() {
        executorService = Executors.newFixedThreadPool(2);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ú–∞—Å—Ç–µ—Ä–∞
        master = new Master(TEST_PORT);
        executorService.submit(master::start);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –í–æ—Ä–∫–µ—Ä–∞
        worker = new WorkerNode("localhost", TEST_PORT);
        executorService.submit(worker::start);

        // –î–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Ä–∫–µ—Ä—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    @AfterAll
    void tearDown() throws IOException {
        worker.stopWorker();
        master.stop();
        executorService.shutdown();
    }

    @Test
    void testMasterReceivesResultWithListProcessing() throws Exception {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ª—è–º–±–¥–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        LambdaTask<String, String> task = new LambdaTask<>(
                (List<String> input) -> "Processed " + input.size() + " elements",
                Arrays.asList("elem1", "elem2", "elem3")
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞
        String result = master.submitTask(task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assertEquals("Processed 3 elements", result);
    }

    @Test
    void testMasterReceivesResultWithoutInput() throws Exception {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        LambdaTask<String, String> task = new LambdaTask<>(
                (List<String> input) -> "No input provided",
                null
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞
        String result = master.submitTask(task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assertEquals("No input provided", result);
    }

    @Test
    void testMasterReceivesResultWithMultiplication() throws Exception {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∞ 2
        LambdaTask<List<Integer>, List<Integer>> task = new LambdaTask<>(
                (List<Integer> input) -> input.stream().map(x -> x * 2).toList(),
                Arrays.asList(1, 2, 3, 4, 5)
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞
        List<Integer> result = master.submitTask(task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assertEquals(Arrays.asList(2, 4, 6, 8, 10), result);
    }

    @Test
    public void testRemoteComputation() {
        CloudSession cloud = CloudSession.builder()
                .master("192.168.1.100", 9090)
                .build();

        // 1. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–∞–∫–æ–º
        CloudContext cloudContext = cloud.cloudContext();

        // üìå –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ–¥–∞—á–∞ –ª—è–º–±–¥—ã
        CloudDataset<Integer> dataset = cloudContext.parallelize(List.of(1, 2, 3, 4, 5));
        CloudDataset<Integer> squared = dataset.map(x -> x * x);
        List<Integer> result = squared.collect();
        System.out.println(result);  // [1, 4, 9, 16, 25]

        // üìå –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–µ—Ä–µ–¥–∞—á–∞ JAR-—Ñ–∞–π–ª–∞
        cloudContext.submitJar("my-computation.jar", "com.example.Main", "run");
    }
}
