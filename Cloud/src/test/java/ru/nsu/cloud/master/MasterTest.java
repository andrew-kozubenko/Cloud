package ru.nsu.cloud.master;

import org.junit.jupiter.api.*;
import ru.nsu.cloud.api.LambdaTask;
import ru.nsu.cloud.api.RemoteTask;
import ru.nsu.cloud.api.SerializableFunction;
import ru.nsu.cloud.client.CloudContext;
import ru.nsu.cloud.client.CloudDataset;
import ru.nsu.cloud.client.CloudSession;
import ru.nsu.cloud.master.Master;
import ru.nsu.cloud.worker.WorkerNode;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class MasterTest {
    private static final int TEST_PORT = 5001;
    private Master master;
    private WorkerNode worker;
    private ExecutorService executorService;

    @BeforeAll
    void setUp() {
        executorService = Executors.newFixedThreadPool(2);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ú–∞—Å—Ç–µ—Ä–∞
        master = new Master(TEST_PORT);
        executorService.submit(master::start);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –í–æ—Ä–∫–µ—Ä–∞
        worker = new WorkerNode("localhost", TEST_PORT);
        executorService.submit(worker::start);

        // –î–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Ä–∫–µ—Ä—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    @AfterAll
    void tearDown() throws IOException {
        worker.stopWorker();
        master.stop();
        executorService.shutdown();
    }

    @Test
    void testTaskExecutionWithList() throws Exception {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ª—è–º–±–¥–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å List
        LambdaTask<String> task = new LambdaTask<>(
                (Object input) -> {
                    List<?> list = (List<?>) input;
                    return "Processed " + list.size() + " elements";
                },
                Arrays.asList("elem1", "elem2", "elem3")  // –í–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
        );

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStreamCaptor));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        master.submitTask(task);

        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        Thread.sleep(2000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ—Ä–∫–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É
        String consoleOutput = outputStreamCaptor.toString().trim();
        assertTrue(consoleOutput.contains("Processed 3 elements"));
    }

    @Test
    void testMasterReceivesResult() throws Exception {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ª—è–º–±–¥–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å List
        LambdaTask<String> task = new LambdaTask<>(
                (Object input) -> {
                    List<?> list = (List<?>) input;
                    return "Processed " + list.size() + " elements";
                },
                Arrays.asList("elem1", "elem2", "elem3")  // –í–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        master.submitTask(task);

        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        Thread.sleep(2000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        String expectedResult = "Processed 3 elements";
        assertEquals(expectedResult, task.execute());
    }

    @Test
    public void testRemoteComputation() {
        CloudSession cloud = CloudSession.builder()
                .master("192.168.1.100", 9090)
                .build();

        // 1. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–∞–∫–æ–º
        CloudContext cloudContext = cloud.cloudContext();

        // üìå –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ–¥–∞—á–∞ –ª—è–º–±–¥—ã
        CloudDataset<Integer> dataset = cloudContext.parallelize(List.of(1, 2, 3, 4, 5));
        CloudDataset<Integer> squared = dataset.map(x -> x * x);
        List<Integer> result = squared.collect();
        System.out.println(result);  // [1, 4, 9, 16, 25]

        // üìå –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–µ—Ä–µ–¥–∞—á–∞ JAR-—Ñ–∞–π–ª–∞
        cloudContext.submitJar("my-computation.jar", "com.example.Main", "run");
    }
}
